package com.example.jdbcdemo.service;


import com.example.jdbcdemo.domain.Adres;
import com.example.jdbcdemo.domain.Prawnik;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;



public class AdresManager {

    public static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";

    public static final String CREATE_ADRES_TABLE = "CREATE TABLE Adres(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY , " +
            "miejscowosc varchar(30) , ulica varchar(30) ,nr INTEGER)";

    public static final String ADD_adres = "INSERT INTO adres(miejscowosc,ulica ,nr) VALUES(?, ?, ?)";
    public static final String UPDATE_adres = "UPDATE Adres set ulica=? where id=? ";
    public static final String DELETE_adres = "DELETE FROM adres WHERE id=?";
    public static final String GET_ALL = "SELECT id, miejscowosc , ulica ,nr FROM adres";
    public static final String DELETE_ALL = "DELETE FROM adres";
    public static final String GET_ALL_IN_CLASS = "SELECT prawnik.id, imie, nazwisko, wiek FROM prawnik WHERE adres_id = ?";

    private Connection connection;

    public AdresManager() {
        try {
            connection = DriverManager.getConnection(URL);
            if(!checkIfTableExists()) {
                connection.createStatement().executeUpdate(CREATE_ADRES_TABLE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    private Boolean checkIfTableExists() {
        try {
            Statement statement = connection.createStatement();
            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);

            while (rs.next()) {
                if ("Adres".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    
    public Connection getConnection() {
		return connection;
	}

    public int zapisz(Adres adres) {
    	int liczba = 0;
        try {
            String stmt = "";
            
           
                stmt = ADD_adres;
            
            PreparedStatement dodajAdresyStmt = connection.prepareStatement(stmt, Statement.RETURN_GENERATED_KEYS);
            dodajAdresyStmt.setInt(3, adres.getNr());
            dodajAdresyStmt.setString(2, adres.getUlica());
            dodajAdresyStmt.setString(1, adres.getMiejscowosc());
            liczba =dodajAdresyStmt.executeUpdate();
            
            ResultSet generatedKeys = null;
            try {
                generatedKeys = dodajAdresyStmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    adres.setId(generatedKeys.getLong(1));
                }
            } finally {
                if(generatedKeys != null) {
                    generatedKeys.close();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return liczba;
        }
        return liczba;
    }

    public int usun(Adres adres) throws Exception {
        int count = 0;
        try {
            PreparedStatement usunStatement = connection.prepareStatement(DELETE_adres);
            usunStatement.setLong(1, adres.getId());
           count =  usunStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int usunWszystkich() {
    	int count =0;
        try {
         count =  connection.prepareStatement(DELETE_ALL).executeUpdate();
        } catch (SQLException e) {}
        
        return count;
    }

    public List<Adres> pobierzWszystkie() {
        try {
            ResultSet rs = connection.prepareStatement(GET_ALL).executeQuery();
            List<Adres> klasy = new ArrayList<>();
            while (rs.next()) {
                Adres adres = new Adres(rs.getString("miejscowosc"), rs.getString("ulica"), rs.getInt("nr"));
                adres.setId(rs.getLong("id"));
                adres.setUczniowie(pobierzWszystkichAdresy(adres));
                klasy.add(adres);
            }
            return klasy;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public List<Prawnik> pobierzWszystkichAdresy(Adres adres) {
        try {
            PreparedStatement ps = connection.prepareStatement(GET_ALL_IN_CLASS);
            ps.setLong(1, adres.getId());
            ResultSet rs = ps.executeQuery();
            List<Prawnik> prawnicy = new ArrayList<>();
            while (rs.next()) {
            	Prawnik prawnik = new Prawnik(rs.getString("imie"), rs.getString("nazwisko"), rs.getInt("wiek"));
                prawnik.setId(rs.getLong("id"));
                prawnik.setAdres(adres);
                prawnicy.add(prawnik);
            }
            return prawnicy;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public int editPrawnik(String ulica,Adres adres)
   	{
   		int count = 0;
   		try {
   			PreparedStatement editPrawnikStmt = connection.prepareStatement(UPDATE_adres);
   			editPrawnikStmt.setString(1, ulica);
   			editPrawnikStmt.setLong(2, adres.getId());
   			count = editPrawnikStmt.executeUpdate();
   			
   		} catch (SQLException e) {
   			e.printStackTrace();
   		}
   		
   		return count;
   		
   	}

    public void close() {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
